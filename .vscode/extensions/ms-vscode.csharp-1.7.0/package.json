{
	"name": "csharp",
	"publisher": "ms-vscode",
	"version": "1.7.0",
	"description": "C# for Visual Studio Code (powered by OmniSharp).",
	"displayName": "C#",
	"author": "Microsoft Corporation",
	"license": "SEE LICENSE IN RuntimeLicenses/license.txt",
	"icon": "images/csharpIcon.png",
	"preview": true,
	"bugs": {
		"url": "https://github.com/OmniSharp/omnisharp-vscode/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/OmniSharp/omnisharp-vscode.git"
	},
	"categories": [
		"Debuggers",
		"Languages",
		"Linters",
		"Snippets"
	],
	"main": "./out/src/main",
	"scripts": {
		"vscode:prepublish": "tsc -p ./",
		"compile": "tsc -p ./ && gulp tslint",
		"watch": "tsc -watch -p ./",
		"test": "node ./node_modules/vscode/bin/test",
		"postinstall": "node ./node_modules/vscode/bin/install"
	},
	"dependencies": {
		"fs-extra": "^1.0.0",
		"http-proxy-agent": "^1.0.0",
		"https-proxy-agent": "^1.0.0",
		"lodash.debounce": "^4.0.8",
		"mkdirp": "^0.5.1",
		"open": "*",
		"semver": "*",
		"tmp": "0.0.28",
		"vscode-debugprotocol": "^1.6.1",
		"vscode-extension-telemetry": "0.0.4",
		"yauzl": "^2.5.0"
	},
	"devDependencies": {
		"@types/chai": "^3.4.34",
		"@types/fs-extra": "0.0.35",
		"@types/mkdirp": "^0.3.29",
		"@types/mocha": "^2.2.32",
		"@types/node": "^6.0.40",
		"@types/semver": "^5.3.30",
		"@types/tmp": "0.0.32",
		"chai": "^3.5.0",
		"del": "^2.0.2",
		"gulp": "^3.9.1",
		"gulp-mocha": "^2.1.3",
		"gulp-tslint": "^4.3.0",
		"mocha": "^2.3.3",
		"plist": "^2.0.1",
		"tslint": "^3.15.1",
		"tslint-microsoft-contrib": "^2.0.12",
		"typescript": "^2.0.3",
		"vsce": "^1.7.0",
		"vscode": "^1.0.0"
	},
	"runtimeDependencies": [
		{
			"description": "Mono Runtime (Linux / x86)",
			"url": "https://omnisharpdownload.blob.core.windows.net/ext/mono.linux-x86-4.8.0.478.zip",
			"installPath": "./bin",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86"
			],
			"binaries": [
				"./mono.linux-x86",
				"./run"
			]
		},
		{
			"description": "Mono Runtime (Linux / x64)",
			"url": "https://omnisharpdownload.blob.core.windows.net/ext/mono.linux-x86_64-4.8.0.478.zip",
			"installPath": "./bin",
			"platforms": [
				"linux"
			],
			"architectures": [
				"x86_64"
			],
			"binaries": [
				"./mono.linux-x86_64",
				"./run"
			]
		},
		{
			"description": "Mono Runtime (macOS)",
			"url": "https://omnisharpdownload.blob.core.windows.net/ext/mono.osx-4.8.0.478.zip",
			"installPath": "./bin",
			"platforms": [
				"darwin"
			],
			"binaries": [
				"./mono.osx",
				"./run"
			]
		},
		{
			"description": "Mono Framework Assemblies",
			"url": "https://omnisharpdownload.blob.core.windows.net/ext/framework-4.8.0.478.zip",
			"installPath": "./bin/framework",
			"platforms": [
				"darwin",
				"linux"
			]
		},
		{
			"description": "OmniSharp (.NET 4.6 / x86)",
			"url": "https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-win-x86-1.9-beta25.zip",
			"installPath": "./bin/omnisharp",
			"platforms": [
				"win32"
			],
			"architectures": [
				"x86"
			]
		},
		{
			"description": "OmniSharp (.NET 4.6 / x64)",
			"url": "https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-win-x64-1.9-beta25.zip",
			"installPath": "./bin/omnisharp",
			"platforms": [
				"win32"
			],
			"architectures": [
				"x86_64"
			]
		},
		{
			"description": "OmniSharp (Mono 4.6)",
			"url": "https://omnisharpdownload.blob.core.windows.net/ext/omnisharp-mono-1.9-beta25.zip",
			"installPath": "./bin/omnisharp",
			"platforms": [
				"darwin",
				"linux"
			]
		},
		{
			"description": ".NET Core Debugger (Windows / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-win7-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-win7-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"win7-x64"
			]
		},
		{
			"description": ".NET Core Debugger (macOS / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-osx.10.11-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-osx.10.11-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"osx.10.11-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (CentOS / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-centos.7-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-centos.7-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"centos.7-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (Debian / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-debian.8-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-debian.8-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"debian.8-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (Fedora 23 / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-fedora.23-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-fedora.23-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"fedora.23-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (Fedora 24 / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-fedora.24-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-fedora.24-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"fedora.24-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (OpenSUSE 13 / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-opensuse.13.2-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-opensuse.13.2-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"opensuse.13.2-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (OpenSUSE 42 / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-opensuse.42.1-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-opensuse.42.1-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"opensuse.42.1-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (RHEL / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-rhel.7.2-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-rhel.7.2-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"rhel.7-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (Ubuntu 14.04 / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-ubuntu.14.04-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-ubuntu.14.04-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"ubuntu.14.04-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (Ubuntu 16.04 / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-ubuntu.16.04-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-ubuntu.16.04-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"ubuntu.16.04-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		},
		{
			"description": ".NET Core Debugger (Ubuntu 16.10 / x64)",
			"url": "https://vsdebugger.azureedge.net/coreclr-debug-1-7-1/coreclr-debug-ubuntu.16.10-x64.zip",
			"fallbackUrl": "https://vsdebugger.blob.core.windows.net/coreclr-debug-1-7-1/coreclr-debug-ubuntu.16.10-x64.zip",
			"installPath": ".debugger",
			"runtimeIds": [
				"ubuntu.16.10-x64"
			],
			"binaries": [
				"./OpenDebugAD7",
				"./clrdbg"
			]
		}
	],
	"engines": {
		"vscode": "^1.5.0"
	},
	"activationEvents": [
		"onLanguage:csharp",
		"onCommand:o.restart",
		"onCommand:o.pickProjectAndStart",
		"onCommand:o.showOutput",
		"onCommand:dotnet.restore",
		"onCommand:csharp.downloadDebugger",
		"onCommand:csharp.listProcess",
		"onCommand:csharp.listRemoteProcess",
		"workspaceContains:project.json"
	],
	"contributes": {
		"languages": [
			{
				"id": "csharp",
				"extensions": [
					".cs",
					".csx"
				],
				"aliases": [
					"C#",
					"csharp"
				],
				"configuration": "./csharp.configuration.json"
			}
		],
		"configuration": {
			"title": "C# configuration",
			"properties": {
				"csharp.suppressDotnetInstallWarning": {
					"type": "boolean",
					"default": false,
					"description": "Suppress the warning that the .NET CLI is not on the path."
				},
				"csharp.suppressDotnetRestoreNotification": {
					"type": "boolean",
					"default": false,
					"description": "Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved."
				},
				"omnisharp.path": {
					"type": [
						"string",
						"null"
					],
					"default": null,
					"description": "Specifies the full path to the OmniSharp server."
				},
				"omnisharp.useMono": {
					"type": "boolean",
					"default": false,
					"description": "Launch OmniSharp with Mono."
				},
				"omnisharp.loggingLevel": {
					"type": "string",
					"default": "information",
					"enum": [
						"trace",
						"debug",
						"information",
						"warning",
						"error",
						"critical"
					],
					"description": "Specifies the level of logging output from the OmniSharp server."
				},
				"omnisharp.autoStart": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command"
				},
				"omnisharp.projectLoadTimeout": {
					"type": "number",
					"default": 60,
					"description": "The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds."
				},
				"omnisharp.maxProjectResults": {
					"type": "number",
					"default": 250,
					"description": "The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250)."
				},
				"omnisharp.useEditorFormattingSettings": {
					"type": "boolean",
					"default": true,
					"description": "Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size)."
				}
			}
		},
		"grammars": [
			{
				"language": "csharp",
				"scopeName": "source.cs",
				"path": "./syntaxes/csharp.tmLanguage"
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "project.json",
				"url": "http://json.schemastore.org/project"
			},
			{
				"fileMatch": "omnisharp.json",
				"url": "http://json.schemastore.org/omnisharp"
			}
		],
		"commands": [
			{
				"command": "o.restart",
				"title": "Restart OmniSharp",
				"category": "OmniSharp"
			},
			{
				"command": "o.pickProjectAndStart",
				"title": "Select Project",
				"category": "OmniSharp"
			},
			{
				"command": "dotnet.generateAssets",
				"title": "Generate Assets for Build and Debug",
				"category": ".NET"
			},
			{
				"command": "dotnet.restore",
				"title": "Restore Packages",
				"category": ".NET"
			},
			{
				"command": "csharp.downloadDebugger",
				"title": "Download .NET Core Debugger",
				"category": "Debug"
			},
			{
				"command": "csharp.listProcess",
				"title": "List process for attach",
				"category": "CSharp"
			},
			{
				"command": "csharp.listRemoteProcess",
				"title": "List processes on remote connection for attach",
				"category": "CSharp"
			}
		],
		"keybindings": [
			{
				"command": "o.showOutput",
				"key": "Ctrl+L L",
				"mac": "Cmd+L L"
			},
			{
				"key": "shift+0",
				"command": "^acceptSelectedSuggestion",
				"when": "editorTextFocus && suggestWidgetVisible && editorLangId == 'csharp' && suggestionSupportsAcceptOnKey"
			},
			{
				"key": "shift+9",
				"command": "^acceptSelectedSuggestion",
				"when": "editorTextFocus && suggestWidgetVisible && editorLangId == 'csharp' && suggestionSupportsAcceptOnKey"
			},
			{
				"key": ".",
				"command": "^acceptSelectedSuggestion",
				"when": "editorTextFocus && suggestWidgetVisible && editorLangId == 'csharp' && suggestionSupportsAcceptOnKey"
			}
		],
		"snippets": [
			{
				"language": "csharp",
				"path": "./snippets/csharp.json"
			}
		],
		"debuggers": [
			{
				"type": "coreclr",
				"label": ".NET Core",
				"enableBreakpointsFor": {
					"languageIds": [
						"csharp",
						"razor"
					]
				},
				"runtime": "node",
				"runtimeArgs": [],
				"variables": {
					"pickProcess": "csharp.listProcess",
					"pickRemoteProcess": "csharp.listRemoteProcess"
				},
				"program": "./out/src/coreclr-debug/proxy.js",
				"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
				"configurationAttributes": {
					"launch": {
						"type": "object",
						"required": [
							"program",
							"cwd"
						],
						"properties": {
							"program": {
								"type": "string",
								"description": "Path to the application dll or .NET Core host executable to launch. Example: '${workspaceRoot}/bin/Debug/<target-framework>/<project-name.dll>' where:\n<target-framework>: (example: 'netstandard1.5') This is the name of the framework that the app is being built for. It is set in the project.json file.\n<project-name>: (example: 'MyApp') The name of the project being debugged.",
								"default": "${workspaceRoot}/bin/Debug/<target-framework>/<project-name.dll>"
							},
							"cwd": {
								"type": "string",
								"description": "Path to the working directory of the program being debugged. Default is the current workspace.",
								"default": "${workspaceRoot}"
							},
							"args": {
								"type": "array",
								"description": "Command line arguments passed to the program.",
								"items": {
									"type": "string"
								},
								"default": []
							},
							"stopAtEntry": {
								"type": "boolean",
								"description": "If true, the debugger should stop at the entry point of the target.",
								"default": false
							},
							"launchBrowser": {
								"description": "Describes options to launch a web browser as part of launch",
								"default": {
									"enabled": true,
									"args": "${auto-detect-url}",
									"windows": {
										"command": "cmd.exe",
										"args": "/C start ${auto-detect-url}"
									},
									"osx": {
										"command": "open"
									},
									"linux": {
										"command": "xdg-open"
									}
								},
								"type": "object",
								"properties": {
									"enabled": {
										"type": "boolean",
										"description": "Whether web browser launch is enabled",
										"default": true
									},
									"args": {
										"type": "string",
										"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to",
										"default": "${auto-detect-url}"
									},
									"osx": {
										"description": "OSX-specific web launch configuration options",
										"default": {
											"command": "open"
										},
										"type": "object",
										"properties": {
											"command": {
												"type": "string",
												"description": "The command to execute for launching the web browser",
												"default": "open"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to",
												"default": "${auto-detect-url}"
											}
										}
									},
									"linux": {
										"description": "Linux-specific web launch configuration options",
										"default": {
											"command": "xdg-open"
										},
										"type": "object",
										"properties": {
											"command": {
												"type": "string",
												"description": "The command to execute for launching the web browser",
												"default": "xdg-open"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to",
												"default": "${auto-detect-url}"
											}
										}
									},
									"windows": {
										"description": "Windows-specific web launch configuration options",
										"default": {
											"command": "cmd.exe",
											"args": "/C start ${auto-detect-url}"
										},
										"type": "object",
										"properties": {
											"command": {
												"type": "string",
												"description": "The command to execute for launching the web browser",
												"default": "cmd.exe"
											},
											"args": {
												"type": "string",
												"description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to",
												"default": "${auto-detect-url}"
											}
										}
									}
								}
							},
							"env": {
								"type": "object",
								"additionalProperties": {
									"type": "string"
								},
								"description": "Environment variables passed to the program.",
								"default": {}
							},
							"externalConsole": {
								"type": "boolean",
								"description": "If 'true' the debugger should launch the target application into a new external console.",
								"default": false
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
								"additionalProperties": {
									"type": "string"
								},
								"default": {
									"<source-path>": "<target-path>"
								}
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Optional flag to only show user code.",
								"default": true
							},
							"symbolPath": {
								"type": "array",
								"description": "Array of directories to use to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to. Example: '[ \"/Volumes/symbols\" ]",
								"items": {
									"type": "string"
								},
								"default": []
							},
							"requireExactSource": {
								"type": "boolean",
								"description": "Optional flag to require current source code to match the pdb.",
								"default": true
							},
							"enableStepFiltering": {
								"type": "boolean",
								"description": "Optional flag to enable stepping over Properties and Operators.",
								"default": true
							},
							"logging": {
								"description": "Optional flags to determine what types of messages should be logged to the output window.",
								"type": "object",
								"required": [],
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the output window.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the output window.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
										"default": false
									},
									"trace": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the output window.",
										"default": false
									},
									"traceResponse": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the output window.",
										"default": false
									}
								}
							},
							"pipeTransport": {
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (clrdbg).",
								"type": "object",
								"default": {
									"pipeCwd": "${workspaceRoot}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
									"pipeArgs": [],
									"debuggerPath": "enter the path for the debugger on the target machine, for example ~/clrdbg/clrdbg"
								},
								"properties": {
									"pipeCwd": {
										"type": "string",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"default": "${workspaceRoot}"
									},
									"pipeProgram": {
										"type": "string",
										"description": "The fully qualified pipe command to execute.",
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
									},
									"pipeArgs": {
										"type": "array",
										"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"debuggerPath": {
										"type": "string",
										"description": "The full path to the debugger on the target machine.",
										"default": "enter the path for the debugger on the target machine, for example ~/clrdbg/clrdbg"
									},
									"pipeEnv": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										},
										"description": "Environment variables passed to the pipe program.",
										"default": {}
									},
									"windows": {
										"description": "Windows-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceRoot}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"osx": {
										"description": "OSX-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceRoot}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"linux": {
										"description": "Linux-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceRoot}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									}
								}
							}
						}
					},
					"attach": {
						"type": "object",
						"required": [],
						"properties": {
							"processName": {
								"type": "string",
								"description": "",
								"default": "The process name to attach to. If this is used, 'processId' should not be used."
							},
							"processId": {
								"anyOf": [
									{
										"type": "string",
										"description": "The process id to attach to. Use \"${command.pickProcesss}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
										"default": "${command.pickProcess}"
									},
									{
										"type": "integer",
										"description": "The process id to attach to. Use \"${command.pickProcesss}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
										"default": 0
									}
								]
							},
							"sourceFileMap": {
								"type": "object",
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
								"additionalProperties": {
									"type": "string"
								},
								"default": {
									"<source-path>": "<target-path>"
								}
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Optional flag to only show user code.",
								"default": true
							},
							"symbolPath": {
								"type": "array",
								"description": "Array of directories to use to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to. Example: '[ \"/Volumes/symbols\" ]",
								"items": {
									"type": "string"
								},
								"default": []
							},
							"requireExactSource": {
								"type": "boolean",
								"description": "Optional flag to require current source code to match the pdb.",
								"default": true
							},
							"enableStepFiltering": {
								"type": "boolean",
								"description": "Optional flag to enable stepping over Properties and Operators.",
								"default": true
							},
							"logging": {
								"description": "Optional flags to determine what types of messages should be logged to the output window.",
								"type": "object",
								"required": [],
								"default": {},
								"properties": {
									"exceptions": {
										"type": "boolean",
										"description": "Optional flag to determine whether exception messages should be logged to the output window.",
										"default": true
									},
									"moduleLoad": {
										"type": "boolean",
										"description": "Optional flag to determine whether module load events should be logged to the output window.",
										"default": true
									},
									"programOutput": {
										"type": "boolean",
										"description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
										"default": true
									},
									"engineLogging": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
										"default": false
									},
									"trace": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the output window.",
										"default": false
									},
									"traceResponse": {
										"type": "boolean",
										"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the output window.",
										"default": false
									}
								}
							},
							"pipeTransport": {
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (clrdbg).",
								"type": "object",
								"default": {
									"pipeCwd": "${workspaceRoot}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
									"pipeArgs": [],
									"debuggerPath": "enter the path for the debugger on the target machine, for example ~/clrdbg/clrdbg"
								},
								"properties": {
									"pipeCwd": {
										"type": "string",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"default": "${workspaceRoot}"
									},
									"pipeProgram": {
										"type": "string",
										"description": "The fully qualified pipe command to execute.",
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
									},
									"pipeArgs": {
										"type": "array",
										"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
										"items": {
											"type": "string"
										},
										"default": []
									},
									"debuggerPath": {
										"type": "string",
										"description": "The full path to the debugger on the target machine.",
										"default": "enter the path for the debugger on the target machine, for example ~/clrdbg/clrdbg"
									},
									"pipeEnv": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										},
										"description": "Environment variables passed to the pipe program.",
										"default": {}
									},
									"windows": {
										"description": "Windows-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceRoot}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"osx": {
										"description": "OSX-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceRoot}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									},
									"linux": {
										"description": "Linux-specific pipe launch configuration options",
										"default": {
											"pipeCwd": "${workspaceRoot}",
											"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
											"pipeArgs": []
										},
										"type": "object",
										"properties": {
											"pipeCwd": {
												"type": "string",
												"description": "The fully qualified path to the working directory for the pipe program.",
												"default": "${workspaceRoot}"
											},
											"pipeProgram": {
												"type": "string",
												"description": "The fully qualified pipe command to execute.",
												"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
											},
											"pipeArgs": {
												"type": "array",
												"description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
												"items": {
													"type": "string"
												},
												"default": []
											},
											"pipeEnv": {
												"type": "object",
												"additionalProperties": {
													"type": "string"
												},
												"description": "Environment variables passed to the pipe program.",
												"default": {}
											}
										}
									}
								}
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"name": ".NET Core Launch (console)",
						"type": "coreclr",
						"request": "launch",
						"preLaunchTask": "build",
						"program": "${workspaceRoot}/bin/Debug/<target-framework>/<project-name.dll>",
						"args": [],
						"cwd": "${workspaceRoot}",
						"stopAtEntry": false,
						"externalConsole": false
					},
					{
						"name": ".NET Core Launch (web)",
						"type": "coreclr",
						"request": "launch",
						"preLaunchTask": "build",
						"program": "${workspaceRoot}/bin/Debug/<target-framework>/<project-name.dll>",
						"args": [],
						"cwd": "${workspaceRoot}",
						"stopAtEntry": false,
						"launchBrowser": {
							"enabled": true,
							"args": "${auto-detect-url}",
							"windows": {
								"command": "cmd.exe",
								"args": "/C start ${auto-detect-url}"
							},
							"osx": {
								"command": "open"
							},
							"linux": {
								"command": "xdg-open"
							}
						},
						"env": {
							"ASPNETCORE_ENVIRONMENT": "Development"
						},
						"sourceFileMap": {
							"/Views": "${workspaceRoot}/Views"
						}
					},
					{
						"name": ".NET Core Attach",
						"type": "coreclr",
						"request": "attach",
						"processId": "${command.pickProcess}"
					}
				]
			}
		]
	},
	"__metadata": {
		"id": "d0bfc4ab-1d3a-4487-8782-7cf6027b4fff",
		"publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",
		"publisherDisplayName": "Microsoft"
	}
}